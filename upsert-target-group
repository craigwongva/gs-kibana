#!/bin/bash
#
# Update ELB target group for new Kibana instance & remove old instance
#
# Usage:
#  thisfile <recordsetname>
# where <recordsetname> is like 'gsn-kibana-int', omitting the suffix piazzageo.io

TMP=/tmp/upsert
REGION="us-east-1"
PORT="80"
INSTANCE_ID=$(curl http://169.254.169.254/latest/meta-data/instance-id)

ELB_ARN=$(aws elbv2 describe-load-balancers --region $REGION | jq --raw-output --arg RECORD_NAME "$1" '.LoadBalancers[] | select(.LoadBalancerName | contains($RECORD_NAME)) | .LoadBalancerArn') &> $TMP-1000

TG_ARN=$(aws elbv2 describe-target-groups --region $REGION --load-balancer-arn $ELB_ARN | jq --raw-output '.TargetGroups[] | .TargetGroupArn') >> $TMP-1000

aws elbv2 register-targets --region $REGION --target-group-arn $TG_ARN --targets Id=$INSTANCE_ID,Port=$PORT >> $TMP-1000

TARGETS=$(aws elbv2 describe-target-health --region $REGION --target-group-arn $TG_ARN | jq --raw-output '.TargetHealthDescriptions[] | .Target | .Id') >> $TMP-1000

# Deregister any targets that are not the current instance
for TARGET in $TARGETS
do
  if [ $TARGET != $INSTANCE_ID ]
  then
    # Replace instances currently in the target group with current instance
    aws elbv2 deregister-targets --region $REGION --target-group-arn $TG_ARN --targets Id=$TARGET,Port=$PORT
  fi
done    