#!/bin/bash 
##
## Create certificates for Kibana+nginx

TMP=/tmp/certs

##
# Validate parameters.
##

if [ $# -lt 1 ]
  then
    echo Usage:
    echo '  ' \<thisfile\> \<space\> [\<testprefix\>]
    echo where 
    echo '  ' \<space\> is either int, dev, test, stage or prod,
    echo '  ' \<testprefix\> is any string
    exit 1
fi

if [ $# -eq 2 ]
  then
    testprefixdash=$2-                               &> $TMP-1070
else
    testprefixdash=                                  &> $TMP-1080
fi

space=$1

if [ ${space} = 'prod' ]; then
 gstype='gsp'
else
 if [[ \
  ${space} = 'int' || ${space} = 'test' || \
  ${space} = 'dev' || ${space} = 'stage' ]]; then
  gstype='gsn'
 else
  echo Space must be either int, test, dev, stage or prod. It''s ${space}
  exit 1
 fi
fi

##
# Install certbot
##

if [ -e /usr/local/bin/certbot-auto ]
then
  echo certbot-auto already installed
else
  curl -O https://dl.eff.org/certbot-auto           &> $TMP-1090
  chmod +x certbot-auto                             &> $TMP-1100
  sudo mv certbot-auto /usr/local/bin/certbot-auto  &> $TMP-1200
fi

##
# Get this instance's security group id
##

securitygroupname=$(curl --silent http://169.254.169.254/latest/meta-data/security-groups) &> $TMP-1910
sudo yum install -y jq &> $TMP-1920
thisinstanceregion=$(curl --silent http://169.254.169.254/latest/dynamic/instance-identity/document | jq -r .region) &> $TMP-1930
thisinstanceinstanceid=$(curl --silent http://169.254.169.254/latest/meta-data/instance-id) &> $TMP-2000
securitygroupid=$( \
  aws ec2 describe-security-groups \
  --filter Name=group-name,Values="${securitygroupname}" \
  --region ${thisinstanceregion} --query SecurityGroups[].GroupId --output text)

##
# Make buckets where certs will be stored
##

aws s3 mb s3://${testprefixdash}${gstype}-kibana --region us-east-1 &> $TMP-1300

##
# Ensure the recordset points at this EC2 instance.
##

./upsert-route53 ${testprefixdash}${gstype}-kibana-${space} &> $TMP-1800

##
# Open ssh from this instance to letsencrypt's server (i.e. 0.0.0.0/0).
#
# The following output is echo and not redirected, because the 443 seemed 
# to not get opened.
#
# The "sleep 15" is intended to allow time for 443 to get opened.
##

echo aws ec2 authorize-security-group-ingress --group-id ${securitygroupid} 
echo  --protocol tcp --port 443 --cidr 0.0.0.0/0
echo   --region ${thisinstanceregion}

aws ec2 authorize-security-group-ingress --group-id ${securitygroupid} \
  --protocol tcp --port 443 --cidr 0.0.0.0/0 \
  --region ${thisinstanceregion}

sleep 15

##
# Create certificates.
#  pem files automatically get stored in $letsencryptsourcedir below.
##

certbot-auto certonly --standalone \
  -d ${testprefixdash}${gstype}-kibana-${space}.piazzageo.io \
  --email cwong@radiantblue.com --agree-tos --quiet        &> $TMP-2300

##
# Copy certificates to S3.
#  They will be used later by the Kibana/nginx installer.
##

letsencryptsourcedir=/etc/letsencrypt/live/${testprefixdash}${gstype}-kibana-${space}.piazzageo.io
s3targetdir=s3://${testprefixdash}${gstype}-kibana/letsencrypt/live/${gstype}-kibana-${space}.piazzageo.io/
tempdir=/home/ec2-user/gs-kibana

rm -f ${tempdir}/cert.pem                                  &> $TMP-2400
rm -f ${tempdir}/chain.pem                                 &> $TMP-2410
rm -f ${tempdir}/fullchain.pem                             &> $TMP-2420
rm -f ${tempdir}/privkey.pem                               &> $TMP-2430

sudo cp ${letsencryptsourcedir}/cert.pem      ${tempdir}   &> $TMP-2500
sudo cp ${letsencryptsourcedir}/chain.pem     ${tempdir}   &> $TMP-2510
sudo cp ${letsencryptsourcedir}/fullchain.pem ${tempdir}   &> $TMP-2520
sudo cp ${letsencryptsourcedir}/privkey.pem   ${tempdir}   &> $TMP-2530

aws s3 cp ${tempdir}/cert.pem      ${s3targetdir}          &> $TMP-2600
aws s3 cp ${tempdir}/chain.pem     ${s3targetdir}          &> $TMP-2610
aws s3 cp ${tempdir}/fullchain.pem ${s3targetdir}          &> $TMP-2620
aws s3 cp ${tempdir}/privkey.pem   ${s3targetdir}          &> $TMP-2630

##
# There is no further need for 443 to be open.
##

aws ec2 revoke-security-group-ingress --group-id ${securitygroupid} \
  --protocol tcp --port 443 --cidr 0.0.0.0/0 \
  --region ${thisinstanceregion} &> $TMP-2700
